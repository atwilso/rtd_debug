<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacetracktable" kind="namespace" language="C++">
    <compoundname>tracktable</compoundname>
    <innerclass refid="classtracktable_1_1_assemble_trajectories" prot="public">tracktable::AssembleTrajectories</innerclass>
    <innerclass refid="classtracktable_1_1_assemble_trajectories_iterator" prot="public">tracktable::AssembleTrajectoriesIterator</innerclass>
    <innerclass refid="classtracktable_1_1_boost_random_u_u_i_d_generator" prot="public">tracktable::BoostRandomUUIDGenerator</innerclass>
    <innerclass refid="classtracktable_1_1_boost_random_u_u_i_d_generator_pure" prot="public">tracktable::BoostRandomUUIDGeneratorPure</innerclass>
    <innerclass refid="classtracktable_1_1_box" prot="public">tracktable::Box</innerclass>
    <innerclass refid="classtracktable_1_1_circular_point_generator" prot="public">tracktable::CircularPointGenerator</innerclass>
    <innerclass refid="classtracktable_1_1_constant_speed_point_generator" prot="public">tracktable::ConstantSpeedPointGenerator</innerclass>
    <innerclass refid="classtracktable_1_1_empty_coordinate_error" prot="public">tracktable::EmptyCoordinateError</innerclass>
    <innerclass refid="classtracktable_1_1_empty_field_error" prot="public">tracktable::EmptyFieldError</innerclass>
    <innerclass refid="structtracktable_1_1_extract_first" prot="public">tracktable::ExtractFirst</innerclass>
    <innerclass refid="structtracktable_1_1_extract_second" prot="public">tracktable::ExtractSecond</innerclass>
    <innerclass refid="classtracktable_1_1_generic_reader" prot="public">tracktable::GenericReader</innerclass>
    <innerclass refid="classtracktable_1_1_grid_point_generator" prot="public">tracktable::GridPointGenerator</innerclass>
    <innerclass refid="classtracktable_1_1kml" prot="public">tracktable::kml</innerclass>
    <innerclass refid="classtracktable_1_1_lexical_cast_error" prot="public">tracktable::LexicalCastError</innerclass>
    <innerclass refid="classtracktable_1_1_line_reader" prot="public">tracktable::LineReader</innerclass>
    <innerclass refid="classtracktable_1_1_multiple_generator_collator" prot="public">tracktable::MultipleGeneratorCollator</innerclass>
    <innerclass refid="classtracktable_1_1_null_value" prot="public">tracktable::NullValue</innerclass>
    <innerclass refid="classtracktable_1_1_parse_error" prot="public">tracktable::ParseError</innerclass>
    <innerclass refid="classtracktable_1_1_point_base" prot="public">tracktable::PointBase</innerclass>
    <innerclass refid="classtracktable_1_1_point_cartesian" prot="public">tracktable::PointCartesian</innerclass>
    <innerclass refid="classtracktable_1_1_point_from_tokens_reader" prot="public">tracktable::PointFromTokensReader</innerclass>
    <innerclass refid="classtracktable_1_1_point_generator" prot="public">tracktable::PointGenerator</innerclass>
    <innerclass refid="classtracktable_1_1_point_lon_lat" prot="public">tracktable::PointLonLat</innerclass>
    <innerclass refid="classtracktable_1_1_point_reader" prot="public">tracktable::PointReader</innerclass>
    <innerclass refid="classtracktable_1_1_point_writer" prot="public">tracktable::PointWriter</innerclass>
    <innerclass refid="classtracktable_1_1_property_comparator" prot="public">tracktable::PropertyComparator</innerclass>
    <innerclass refid="classtracktable_1_1_property_converter" prot="public">tracktable::PropertyConverter</innerclass>
    <innerclass refid="classtracktable_1_1_r_tree" prot="public">tracktable::RTree</innerclass>
    <innerclass refid="classtracktable_1_1_skip_comments_reader" prot="public">tracktable::SkipCommentsReader</innerclass>
    <innerclass refid="classtracktable_1_1_string_tokenizing_reader" prot="public">tracktable::StringTokenizingReader</innerclass>
    <innerclass refid="classtracktable_1_1_timestamp_converter" prot="public">tracktable::TimestampConverter</innerclass>
    <innerclass refid="classtracktable_1_1_token_writer" prot="public">tracktable::TokenWriter</innerclass>
    <innerclass refid="classtracktable_1_1_trajectory" prot="public">tracktable::Trajectory</innerclass>
    <innerclass refid="classtracktable_1_1_trajectory_point" prot="public">tracktable::TrajectoryPoint</innerclass>
    <innerclass refid="classtracktable_1_1_trajectory_reader" prot="public">tracktable::TrajectoryReader</innerclass>
    <innerclass refid="classtracktable_1_1_trajectory_writer" prot="public">tracktable::TrajectoryWriter</innerclass>
    <innerclass refid="classtracktable_1_1_u_u_i_d_generator" prot="public">tracktable::UUIDGenerator</innerclass>
    <innernamespace refid="namespacetracktable_1_1algorithms">tracktable::algorithms</innernamespace>
    <innernamespace refid="namespacetracktable_1_1analysis">tracktable::analysis</innernamespace>
    <innernamespace refid="namespacetracktable_1_1arithmetic">tracktable::arithmetic</innernamespace>
    <innernamespace refid="namespacetracktable_1_1conversions">tracktable::conversions</innernamespace>
    <innernamespace refid="namespacetracktable_1_1detail">tracktable::detail</innernamespace>
    <innernamespace refid="namespacetracktable_1_1domain">tracktable::domain</innernamespace>
    <innernamespace refid="namespacetracktable_1_1log">tracktable::log</innernamespace>
    <innernamespace refid="namespacetracktable_1_1rw">tracktable::rw</innernamespace>
    <innernamespace refid="namespacetracktable_1_1settings">tracktable::settings</innernamespace>
    <innernamespace refid="namespacetracktable_1_1traits">tracktable::traits</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483f" prot="public" static="no" strong="no">
        <type></type>
        <name>PropertyUnderlyingType</name>
        <qualifiedname>tracktable::PropertyUnderlyingType</qualifiedname>
        <enumvalue id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483fa636b85b4096697ec9754bc685ad795a0" prot="public">
          <name>TYPE_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483fa8e689ab7d193fbdf081ee8463fc6df85" prot="public">
          <name>TYPE_REAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483fabd86a5ee3303f17ef3653b8916e7b743" prot="public">
          <name>TYPE_STRING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483fa840dbc420964718b15c359e19759ed73" prot="public">
          <name>TYPE_TIMESTAMP</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetracktable_1ad3ee800355e72cc10e20021c8ac9483fa035bbcabe64cafb5ec33b2c8c06a56c1" prot="public">
          <name>TYPE_NULL</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="62" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="62" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" prot="public" static="no">
        <type>std::map&lt; std::string, PropertyValueT &gt;</type>
        <definition>typedef std::map&lt;std::string, PropertyValueT&gt; tracktable::PropertyMap</definition>
        <argsstring></argsstring>
        <name>PropertyMap</name>
        <qualifiedname>tracktable::PropertyMap</qualifiedname>
        <briefdescription>
<para>Name -&gt; property map. </para>
        </briefdescription>
        <detaileddescription>
<para>We will use this as our container for named properties.</para>
<para><simplesect kind="note"><para>A <computeroutput>std::unordered_map</computeroutput> (hashtable) would have slightly faster asymptotic performance but we will probably never have enough entries in a single property map for it to even be noticeable, let alone significant. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" line="63" column="18" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" prot="public" static="no">
        <type>boost::variant&lt; <ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref>, double, string_type, <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> &gt;</type>
        <definition>typedef boost::variant&lt; NullValue, double, string_type, Timestamp &gt; tracktable::PropertyValue</definition>
        <argsstring></argsstring>
        <name>PropertyValue</name>
        <qualifiedname>tracktable::PropertyValue</qualifiedname>
        <briefdescription>
<para>Discriminated union type for properties. </para>
        </briefdescription>
        <detaileddescription>
<para>We support four data types for properties: <computeroutput>double-precision float</computeroutput>, <computeroutput>string</computeroutput>, <computeroutput>timestamp, and</computeroutput>Null<computeroutput>. If you do not initialize a variant then its type will be</computeroutput>Null` by default.</para>
<para>Note that there is not a separate integer data type. You&apos;ll need to use doubles for that. This is a deliberate decision: we run into compiler troubles trying to serialize and unserialize property values if we allow integers as a distinct type.</para>
<para>Under the hood this will probably always be a <computeroutput>boost::variant</computeroutput> but we will provide our own interface so that you don&apos;t have to know or care exactly how Boost does it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="187" column="4" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a4e4a756f1fea731f2568bbc32da17450" prot="public" static="no">
        <type><ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref></type>
        <definition>typedef PropertyValue tracktable::PropertyValueT</definition>
        <argsstring></argsstring>
        <name>PropertyValueT</name>
        <qualifiedname>tracktable::PropertyValueT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="188" column="23" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" prot="public" static="no">
        <type>boost::posix_time::ptime</type>
        <definition>typedef boost::posix_time::ptime tracktable::Timestamp</definition>
        <argsstring></argsstring>
        <name>Timestamp</name>
        <qualifiedname>tracktable::Timestamp</qualifiedname>
        <briefdescription>
<para>Use Boost timestamps in Tracktable. </para>
        </briefdescription>
        <detaileddescription>
<para>Date/time math is such a pain to get right. We will be much happier and will spend much more time on trajectories if we delegate this to someone else who is more passionate about dates and times than moving objects.</para>
<para>This may be a part of our API where the underlying implementation shows through <ndash/> you may need to use Boost constructs if you want to do time arithmetic on hours, minutes and seconds. There is room for improvement here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="80" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a397479d0c4f087ffead63f5ce2ae7f8f" prot="public" static="no">
        <type>boost::posix_time::time_duration</type>
        <definition>typedef boost::posix_time::time_duration tracktable::Duration</definition>
        <argsstring></argsstring>
        <name>Duration</name>
        <qualifiedname>tracktable::Duration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="81" column="42" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1aa114f56d4173aa416688654b43ab8b4a" prot="public" static="no">
        <type>boost::gregorian::date</type>
        <definition>typedef boost::gregorian::date tracktable::Date</definition>
        <argsstring></argsstring>
        <name>Date</name>
        <qualifiedname>tracktable::Date</qualifiedname>
        <briefdescription>
<para>Use Boost Gregorian dates in Tracktable. </para>
        </briefdescription>
        <detaileddescription>
<para>As above, but worse. The notion of dividing a day into 24 equal parts has been around for at least a couple thousand years. Indexing those days, though... Gregorian? Julian? Babylonian? Mayan? Hebrew? Which calendar system do you use?</para>
<para>We throw up our hands in existential dismay and adopt the Gregorian calendar as the least terrible option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="95" column="32" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a902d4497726b4605eba38a36b481fac0" prot="public" static="no">
        <type>settings::string_type</type>
        <definition>typedef settings::string_type tracktable::string_type</definition>
        <argsstring></argsstring>
        <name>string_type</name>
        <qualifiedname>tracktable::string_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="74" column="31" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a9b84de6fb51c9fc39a4d4b00a736dd73" prot="public" static="no">
        <type>std::vector&lt; string_type &gt;</type>
        <definition>typedef std::vector&lt;string_type&gt; tracktable::string_vector_type</definition>
        <argsstring></argsstring>
        <name>string_vector_type</name>
        <qualifiedname>tracktable::string_vector_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="75" column="21" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a054f774397f3562bde6f0afea877bfac" prot="public" static="no">
        <type>std::basic_ostringstream&lt; string_type::value_type &gt;</type>
        <definition>typedef std::basic_ostringstream&lt;string_type::value_type&gt; tracktable::ostringstream_type</definition>
        <argsstring></argsstring>
        <name>ostringstream_type</name>
        <qualifiedname>tracktable::ostringstream_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="76" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a9d00ceb4b42baad06433459a67e1aaa8" prot="public" static="no">
        <type>std::basic_istringstream&lt; string_type::value_type &gt;</type>
        <definition>typedef std::basic_istringstream&lt;string_type::value_type&gt; tracktable::istringstream_type</definition>
        <argsstring></argsstring>
        <name>istringstream_type</name>
        <qualifiedname>tracktable::istringstream_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="77" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a6652b746e74db7bd75da643a5abb1733" prot="public" static="no">
        <type>std::map&lt; int, int &gt;</type>
        <definition>typedef std::map&lt;int, int&gt; tracktable::IntIntMap</definition>
        <argsstring></argsstring>
        <name>IntIntMap</name>
        <qualifiedname>tracktable::IntIntMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="79" column="18" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1ae0193bd10df2515aaa8c92fbda870293" prot="public" static="no">
        <type>std::map&lt; std::size_t, std::size_t &gt;</type>
        <definition>typedef std::map&lt;std::size_t, std::size_t&gt; tracktable::SizeSizeMap</definition>
        <argsstring></argsstring>
        <name>SizeSizeMap</name>
        <qualifiedname>tracktable::SizeSizeMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="80" column="18" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a6029eb3db2b8bcfd4bff7009556dd8c4" prot="public" static="no">
        <type>std::map&lt; string_type, int &gt;</type>
        <definition>typedef std::map&lt;string_type, int&gt; tracktable::StringIntMap</definition>
        <argsstring></argsstring>
        <name>StringIntMap</name>
        <qualifiedname>tracktable::StringIntMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" line="81" column="18" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/TracktableCommon.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a1b220fef4a0f524b45d526c61a5fea6a" prot="public" static="no">
        <type>boost::uuids::uuid</type>
        <definition>typedef boost::uuids::uuid tracktable::uuid_type</definition>
        <argsstring></argsstring>
        <name>uuid_type</name>
        <qualifiedname>tracktable::uuid_type</qualifiedname>
        <briefdescription>
<para>A convenience typedef for uuids in tracktable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.h" line="59" column="28" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a5edf82af9d067ad8383f2a314fa8487e" prot="public" static="no">
        <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">kml::TrajectoryT</ref></type>
        <definition>using tracktable::TrajectoryT =  kml::TrajectoryT</definition>
        <argsstring></argsstring>
        <name>TrajectoryT</name>
        <qualifiedname>tracktable::TrajectoryT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="51" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1a74ee7f250b4e0354e8fa773624d48d6a" prot="public" static="no">
        <type>kml::TrajectoryVectorT</type>
        <definition>using tracktable::TrajectoryVectorT =  kml::TrajectoryVectorT</definition>
        <argsstring></argsstring>
        <name>TrajectoryVectorT</name>
        <qualifiedname>tracktable::TrajectoryVectorT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="52" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetracktable_1ae5a602b1cf1eb9e0e02593d179ce7dfb" prot="public" static="no">
        <type>kml::PointT</type>
        <definition>using tracktable::PointT =  kml::PointT</definition>
        <argsstring></argsstring>
        <name>PointT</name>
        <qualifiedname>tracktable::PointT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="53" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacetracktable_1acdab2a9eb0e90465eb95faf7c81a479e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::bearing</definition>
        <argsstring>(T const &amp;from, T const &amp;to)</argsstring>
        <name>bearing</name>
        <qualifiedname>tracktable::bearing</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Bearing.h" line="66" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Bearing.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a6522ea6e16bcfb7fe41f95a185a01064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::convex_hull_aspect_ratio</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>convex_hull_aspect_ratio</name>
        <qualifiedname>tracktable::convex_hull_aspect_ratio</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" line="94" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a272df2d876f1b8c88e481cee187ad194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::convex_hull_perimeter</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>convex_hull_perimeter</name>
        <qualifiedname>tracktable::convex_hull_perimeter</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" line="104" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a512d623fbe2ee89ed024efc8d81409b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::convex_hull_area</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>convex_hull_area</name>
        <qualifiedname>tracktable::convex_hull_area</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" line="114" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a37c0c54d6110de1c239fa3132ad6e9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>TrajectoryT::value_type</type>
        <definition>TrajectoryT::value_type tracktable::convex_hull_centroid</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>convex_hull_centroid</name>
        <qualifiedname>tracktable::convex_hull_centroid</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" line="124" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/ConvexHull.h" bodystart="124" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1adb46cec5171474ccb21d03bcd83b8863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Geometry1</type>
          </param>
          <param>
            <type>class Geometry2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::distance</definition>
        <argsstring>(Geometry1 const &amp;from, Geometry2 const &amp;to)</argsstring>
        <name>distance</name>
        <qualifiedname>tracktable::distance</qualifiedname>
        <param>
          <type>Geometry1 const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>Geometry2 const &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Distance.h" line="70" column="10" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Distance.h" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a238d70366ca0fa646f24123f7fd48ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::end_to_end_distance</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>end_to_end_distance</name>
        <qualifiedname>tracktable::end_to_end_distance</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/EndToEndDistance.h" line="61" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/EndToEndDistance.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af8efbd74abfcc7f2b25864636893540d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tracktable::extrapolate</definition>
        <argsstring>(T const &amp;start, T const &amp;finish, double interpolant)</argsstring>
        <name>extrapolate</name>
        <qualifiedname>tracktable::extrapolate</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>finish</declname>
        </param>
        <param>
          <type>double</type>
          <declname>interpolant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Extrapolate.h" line="81" column="7" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Extrapolate.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a5acf7843bb7d60639b5db8e3dc094aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T tracktable::interpolate</definition>
        <argsstring>(T const &amp;start, T const &amp;finish, double interpolant)</argsstring>
        <name>interpolate</name>
        <qualifiedname>tracktable::interpolate</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>finish</declname>
        </param>
        <param>
          <type>double</type>
          <declname>interpolant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Interpolate.h" line="99" column="3" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Interpolate.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a64b474acc3814cc2c399f369560ae98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tracktable::intersects</definition>
        <argsstring>(T1 const &amp;thing1, T2 const &amp;thing2)</argsstring>
        <name>intersects</name>
        <qualifiedname>tracktable::intersects</qualifiedname>
        <param>
          <type>T1 const &amp;</type>
          <declname>thing1</declname>
        </param>
        <param>
          <type>T2 const &amp;</type>
          <declname>thing2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Intersects.h" line="48" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Intersects.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a0010d096205790d2273f2170e074dccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::length</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>length</name>
        <qualifiedname>tracktable::length</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Length.h" line="70" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Length.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a10d4b82ed5d0c8a48b2ed91217135986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointP</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::current_length</definition>
        <argsstring>(PointP const &amp;point)</argsstring>
        <name>current_length</name>
        <qualifiedname>tracktable::current_length</qualifiedname>
        <param>
          <type>PointP const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Length.h" line="76" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/Length.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a07d89f6e43fbf5ef35bb7e1bed13e067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointP</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::current_length_fraction</definition>
        <argsstring>(PointP const &amp;point)</argsstring>
        <name>current_length_fraction</name>
        <qualifiedname>tracktable::current_length_fraction</qualifiedname>
        <param>
          <type>PointP const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/LengthFractionAtPoint.h" line="60" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/LengthFractionAtPoint.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a39ba391a56ebd1a6fc949fd335a70f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtracktable_1_1_trajectory_1a8d3edcdda8ce1ad416c7daa81b016320" kindref="member">TrajectoryT::point_type</ref></type>
        <definition>TrajectoryT::point_type tracktable::point_at_time_fraction</definition>
        <argsstring>(TrajectoryT const &amp;path, double fraction)</argsstring>
        <name>point_at_time_fraction</name>
        <qualifiedname>tracktable::point_at_time_fraction</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtFraction.h" line="72" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtFraction.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aa9c24d6793f00b150906f39ff763352e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtracktable_1_1_trajectory_1a8d3edcdda8ce1ad416c7daa81b016320" kindref="member">TrajectoryT::point_type</ref></type>
        <definition>TrajectoryT::point_type tracktable::point_at_length_fraction</definition>
        <argsstring>(TrajectoryT const &amp;path, double fraction)</argsstring>
        <name>point_at_length_fraction</name>
        <qualifiedname>tracktable::point_at_length_fraction</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtFraction.h" line="79" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtFraction.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af1e69f0ce8d6b5971e0f1840e73b2e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtracktable_1_1_trajectory_1a8d3edcdda8ce1ad416c7daa81b016320" kindref="member">TrajectoryT::point_type</ref></type>
        <definition>TrajectoryT::point_type tracktable::point_at_time</definition>
        <argsstring>(TrajectoryT const &amp;path, Timestamp const &amp;time)</argsstring>
        <name>point_at_time</name>
        <qualifiedname>tracktable::point_at_time</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtTime.h" line="62" column="34" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/PointAtTime.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a02084d5547b2cdfda88baa50ba25999d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::radius_of_gyration</definition>
        <argsstring>(TrajectoryT const &amp;path)</argsstring>
        <name>radius_of_gyration</name>
        <qualifiedname>tracktable::radius_of_gyration</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/RadiusOfGyration.h" line="58" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/RadiusOfGyration.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aec0c645e22389978c15b10e9ed1c6b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename linestring_type</type>
          </param>
        </templateparamlist>
        <type>linestring_type</type>
        <definition>linestring_type tracktable::simplify</definition>
        <argsstring>(linestring_type const &amp;input, double tolerance)</argsstring>
        <name>simplify</name>
        <qualifiedname>tracktable::simplify</qualifiedname>
        <param>
          <type>linestring_type const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Geometric simplification for trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reduces the number of points in a trajectory without introducing positional error greater than the supplied tolerance. Under the hood it uses Douglas-Peucker simplification.</para>
<para>NOTE: The points in the output are copies of the points in the input. Changing the input after a call to <ref refid="namespacetracktable_1aec0c645e22389978c15b10e9ed1c6b7a" kindref="member">simplify()</ref> will have no effect on previous results.</para>
<para>NOTE: This function only cares about geometric error in the trajectory. It does not account for error in the attributes attached to each point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtracktable_1_1_trajectory" kindref="compound">Trajectory</ref> to simplify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Error tolerance measured in the trajectory&apos;s native distance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Simplified version of trajectory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SimplifyLinestring.h" line="93" column="17" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SimplifyLinestring.h" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a4bb0488ee0a802e27748051403e54be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::speed_between</definition>
        <argsstring>(T const &amp;start, T const &amp;finish)</argsstring>
        <name>speed_between</name>
        <qualifiedname>tracktable::speed_between</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>finish</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SpeedBetween.h" line="64" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SpeedBetween.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a4e5ad65154f64ca1c5184dd9953042c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::longitude_as_degrees</definition>
        <argsstring>(T const &amp;point)</argsstring>
        <name>longitude_as_degrees</name>
        <qualifiedname>tracktable::longitude_as_degrees</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="79" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a36752777f3b3ec3b030494181e51c749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::longitude_as_radians</definition>
        <argsstring>(T const &amp;point)</argsstring>
        <name>longitude_as_radians</name>
        <qualifiedname>tracktable::longitude_as_radians</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="85" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a89d927fee509554d1ed7de52e5a01dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::latitude_as_degrees</definition>
        <argsstring>(T const &amp;point)</argsstring>
        <name>latitude_as_degrees</name>
        <qualifiedname>tracktable::latitude_as_degrees</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="91" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a8c064eaff6e050619a44bf785955b2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::latitude_as_radians</definition>
        <argsstring>(T const &amp;point)</argsstring>
        <name>latitude_as_radians</name>
        <qualifiedname>tracktable::latitude_as_radians</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="97" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1afe89a35877cf955abbd6e5564619da51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::set_longitude_from_degrees</definition>
        <argsstring>(T &amp;point, double value)</argsstring>
        <name>set_longitude_from_degrees</name>
        <qualifiedname>tracktable::set_longitude_from_degrees</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="103" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad777d9b0b5605a0f04f92335ffaaaa6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::set_longitude_from_radians</definition>
        <argsstring>(T &amp;point, double value)</argsstring>
        <name>set_longitude_from_radians</name>
        <qualifiedname>tracktable::set_longitude_from_radians</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="109" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a31bc40cd4764c299b753a7c58a6d19b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::set_latitude_from_degrees</definition>
        <argsstring>(T &amp;point, double value)</argsstring>
        <name>set_latitude_from_degrees</name>
        <qualifiedname>tracktable::set_latitude_from_degrees</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="115" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aaa1583cec5f8448e967fe0349873eb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::set_latitude_from_radians</definition>
        <argsstring>(T &amp;point, double value)</argsstring>
        <name>set_latitude_from_radians</name>
        <qualifiedname>tracktable::set_latitude_from_radians</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" line="121" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SphericalCoordinateAccess.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1abbb9282deb4ceba920a24bbd29b6a25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref></type>
        <definition>TrajectoryT tracktable::subset_during_interval</definition>
        <argsstring>(TrajectoryT const &amp;path, Timestamp const &amp;start, Timestamp const &amp;finish)</argsstring>
        <name>subset_during_interval</name>
        <qualifiedname>tracktable::subset_during_interval</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>finish</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SubsetDuringInterval.h" line="62" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/SubsetDuringInterval.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af66b860b784dc10e0575d977530656dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TrajectoryT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>Timestamp tracktable::time_at_fraction</definition>
        <argsstring>(TrajectoryT const &amp;path, double fraction)</argsstring>
        <name>time_at_fraction</name>
        <qualifiedname>tracktable::time_at_fraction</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">TrajectoryT</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TimeAtFraction.h" line="64" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TimeAtFraction.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a998b73908a834aa730ff80726095fcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointP</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::current_time_fraction</definition>
        <argsstring>(PointP const &amp;point)</argsstring>
        <name>current_time_fraction</name>
        <qualifiedname>tracktable::current_time_fraction</qualifiedname>
        <param>
          <type>PointP const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TimeFractionAtPoint.h" line="60" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TimeFractionAtPoint.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ac6b774b970693de19e5cb194b94e1d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::signed_turn_angle</definition>
        <argsstring>(T const &amp;a, T const &amp;b, T const &amp;c)</argsstring>
        <name>signed_turn_angle</name>
        <qualifiedname>tracktable::signed_turn_angle</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TurnAngle.h" line="81" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TurnAngle.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a3e18fe590820364ff95bfffea3319d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double tracktable::unsigned_turn_angle</definition>
        <argsstring>(T const &amp;a, T const &amp;b, T const &amp;c)</argsstring>
        <name>unsigned_turn_angle</name>
        <qualifiedname>tracktable::unsigned_turn_angle</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TurnAngle.h" line="87" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/algorithm_signatures/TurnAngle.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a5725f6cfba31017527e2c0e28a8d878f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>Timestamp tracktable::timestamp</definition>
        <argsstring>(P const &amp;point)</argsstring>
        <name>timestamp</name>
        <qualifiedname>tracktable::timestamp</qualifiedname>
        <param>
          <type>P const &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/trait_signatures/Timestamp.h" line="90" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/trait_signatures/Timestamp.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a3b13ce7665c3c131598d1d68260210b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::set_timestamp</definition>
        <argsstring>(P &amp;point, Timestamp const &amp;ts)</argsstring>
        <name>set_timestamp</name>
        <qualifiedname>tracktable::set_timestamp</qualifiedname>
        <param>
          <type>P &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/trait_signatures/Timestamp.h" line="96" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/detail/trait_signatures/Timestamp.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a1888a2f2fbb7e5711adb8dcf738ac3b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tracktable::almost_equal</definition>
        <argsstring>(T a, T b, T tolerance=settings::EQUALITY_RELATIVE_TOLERANCE)</argsstring>
        <name>almost_equal</name>
        <qualifiedname>tracktable::almost_equal</qualifiedname>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
          <defval>settings::EQUALITY_RELATIVE_TOLERANCE</defval>
        </param>
        <briefdescription>
<para>Compare values to determine if they are almost equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>First value to use in comparison </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value to use in comparison </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for determining comparision, options are <computeroutput>settings::EQUALITY_RELATIVE_TOLERANCE</computeroutput> (default value) or <computeroutput>settings::ZERO_ABSOLUTE_TOLERANCE</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/FloatingPointComparison.h" line="63" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/FloatingPointComparison.h" bodystart="63" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1acb87c8fbc5ee252b33ffb70068548483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tracktable::almost_zero</definition>
        <argsstring>(T z, T epsilon=settings::ZERO_ABSOLUTE_TOLERANCE)</argsstring>
        <name>almost_zero</name>
        <qualifiedname>tracktable::almost_zero</qualifiedname>
        <param>
          <type>T</type>
          <declname>z</declname>
        </param>
        <param>
          <type>T</type>
          <declname>epsilon</declname>
          <defval>settings::ZERO_ABSOLUTE_TOLERANCE</defval>
        </param>
        <briefdescription>
<para>Determine if value is almost zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">z</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to determine if almost zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit for determining value, options are <computeroutput>settings::EQUALITY_RELATIVE_TOLERANCE</computeroutput> or <computeroutput>settings::ZERO_ABSOLUTE_TOLERANCE</computeroutput> (default value) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/FloatingPointComparison.h" line="106" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/FloatingPointComparison.h" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1adf78be7f29b6e9cd313e63723d613af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tracktable::log::severity_level</type>
        <definition>log::severity_level TRACKTABLE_CORE_EXPORT tracktable::log_level</definition>
        <argsstring>()</argsstring>
        <name>log_level</name>
        <qualifiedname>tracktable::log_level</qualifiedname>
        <briefdescription>
<para>Get current log level. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the current log level. Log messages with a severity less than this level will not be displayed.</para>
<para><simplesect kind="note"><para>This function will only return accurate results if you use <computeroutput><ref refid="namespacetracktable_1a20aafc9e8970f81491d7f81b597a630b" kindref="member">tracktable::set_log_level()</ref></computeroutput> to set the log level. If you use Boost calls to go behind the library&apos;s back, it will not be able to track what you do.</para>
</simplesect>
<simplesect kind="return"><para>Current log level (as tracktable::log::severity_level) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.cpp" line="44" column="33" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.cpp" bodystart="44" bodyend="47" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.h" declline="142" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a20aafc9e8970f81491d7f81b597a630b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TRACKTABLE_CORE_EXPORT tracktable::set_log_level</definition>
        <argsstring>(::tracktable::log::severity_level new_level)</argsstring>
        <name>set_log_level</name>
        <qualifiedname>tracktable::set_log_level</qualifiedname>
        <param>
          <type>::tracktable::log::severity_level</type>
          <declname>new_level</declname>
        </param>
        <briefdescription>
<para>Set minimum level at which log messages will be displayed. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, any message with a log level of &apos;info&apos; or above. This may result in too much output for you. In that case, call this function to increase it. For example, if you only want warnings and errors:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="namespacetracktable_1a20aafc9e8970f81491d7f81b597a630b" kindref="member">tracktable::set_log_level</ref>(tracktable::log::warning);</highlight></codeline>
</programlisting></para>
<para>The available log levels are as follows:</para>
<para><itemizedlist>
<listitem><para>trace: Extremely verbose output about algorithm execution. You will only need this if you are debugging Tracktable&apos;s internals.</para>
</listitem><listitem><para>debug: Moderately verbose output about algorithm execution. You will probably never need this, although it is sometimes useful when you need to track down a problem.</para>
</listitem><listitem><para>info: Routine, summary information about what&apos;s going on, including start/end notifications for code that takes a long time to execute such as DBSCAN clustering. It is always safe to set the log level higher than <computeroutput>info</computeroutput>.</para>
</listitem><listitem><para>warning: Something has gone wrong but execution can continue. Results may be strange or unusable.</para>
</listitem><listitem><para>error: Something has gone wrong and execution probably will not continue.</para>
</listitem><listitem><para>fatal: Something has gone very wrong and execution cannot continue.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired minimum log level. Must be of type tracktable::log::severity_level, an enum whose members are the six levels listed above. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.cpp" line="49" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.cpp" bodystart="49" bodyend="71" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Logging.h" declline="126" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a1b6a8863cb1d4af6eb56ac3f27810e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>TRACKTABLE_CORE_EXPORT std::size_t tracktable::peak_memory_use</definition>
        <argsstring>()</argsstring>
        <name>peak_memory_use</name>
        <qualifiedname>tracktable::peak_memory_use</qualifiedname>
        <briefdescription>
<para>Returns the peak (maximum so far) resident set size (physical memory use) measured in bytes, or zero if the value cannot be determined on this OS. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the peak (maximum so far) resident set size (physical memory use) measured in bytes.</para>
<para><simplesect kind="return"><para>Maximum memory use in bytes or zero if the value cannot be determined on this OS. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.cpp" line="41" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.cpp" bodystart="41" bodyend="85" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.h" declline="61" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab24b7b1c1b70cf9cb4b9f0a7089a8fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>TRACKTABLE_CORE_EXPORT std::size_t tracktable::current_memory_use</definition>
        <argsstring>()</argsstring>
        <name>current_memory_use</name>
        <qualifiedname>tracktable::current_memory_use</qualifiedname>
        <briefdescription>
<para>Returns the current resident set size (physical memory use) measured in bytes, or zero if the value cannot be determined on this OS. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the current resident set size (physical memory use) measured in bytes.</para>
<para><simplesect kind="return"><para>Current memory use in bytes or zero if the value cannot be determined on this OS. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.cpp" line="93" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.cpp" bodystart="93" bodyend="160" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/MemoryUse.h" declline="71" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1acb4a04cbbe10c0f9ed4370d28dd7238d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, double value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a property in a collection. </para>
        </briefdescription>
        <detaileddescription>
<para>Add a value to the map.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to alter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric (double-precision) value to store</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function will all add a single value to the map. If the value is already present it will be silently overwritten.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the property to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="94" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="94" bodyend="97" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="178" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ae7d1d3a24adb5aabcc9904e20f7d2cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, string_type const &amp;value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a property in a collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to alter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>String value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="105" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="105" bodyend="108" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="183" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aafad97f461930654b32147174b6d3042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, Timestamp const &amp;value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a property in a collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to alter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="116" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="116" bodyend="119" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="188" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a3b9a4416625ddc85f07eb09e7bc4e6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, NullValue const &amp;value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a property in a collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to alter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref> value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="127" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="127" bodyend="130" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="193" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab5c30ed3354ad3e1f364389e820477c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, PropertyValueT const &amp;value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>PropertyValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a property in a collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to alter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="152" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="152" bodyend="155" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="203" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a565d58600a2c21ca00c7b3f39984f402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>TRACKTABLE_CORE_EXPORT bool tracktable::has_property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name)</argsstring>
        <name>has_property</name>
        <qualifiedname>tracktable::has_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check whether a property is present. </para>
        </briefdescription>
        <detaileddescription>
<para>Check to see whether a given property is present.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to look up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/false (found or not)</para>
</simplesect>
Check the map to see if it contains the given property. This function will not modify the map in any way.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="164" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="164" bodyend="167" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="73" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a03ceda2323963939b94d8d82e67d5052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PropertyValueT</type>
        <definition>TRACKTABLE_CORE_EXPORT PropertyValueT tracktable::property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, bool *is_present)</argsstring>
        <name>property</name>
        <qualifiedname>tracktable::property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_present</declname>
        </param>
        <briefdescription>
<para>Retrieve a property regardless of its type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a property from a map whatever its type.</para>
<para>This accessor will let you retrieve the value of a named property regardless of its underlying data type. The catch is that we don&apos;t know whether or not the property is there to begin with. If it isn&apos;t there then we can&apos;t return anything sensible.</para>
<para>We deal with this by letting you pass in an optional pointer to a boolean. We will set its value to true or false depending on whether or not we found the property you wanted. If it is true, the return value is guaranteed to be whatever is in the map. If it is false, the return value will be an empty variant.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of desired property (if present)</para>
</simplesect>
This function will give you back the named property as a <computeroutput>PropertyValueT</computeroutput> (a Boost variant) if it is present in the map. If not, you&apos;ll get back an uninitialized PropertyValueT and the bool pointed at by is_present will be set to &apos;false&apos;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the property is present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns the requested property and sets <computeroutput>*is_present</computeroutput> to <computeroutput>true</computeroutput>. On failure, returns an uninitialized property and sets <computeroutput>*is_present</computeroutput> to <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="195" column="16" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="195" bodyend="208" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="92" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad5e4d28ef7f22e6e0d0f4b31c8beff24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>TRACKTABLE_CORE_EXPORT double tracktable::real_property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, bool *is_present)</argsstring>
        <name>real_property</name>
        <qualifiedname>tracktable::real_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_present</declname>
        </param>
        <briefdescription>
<para>Retrieve a numeric property. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a real-valued property from the map.</para>
<para>This accessor will let you retrieve the value of a numeric property. The catch is that we don&apos;t know whether or not the property is there to begin with. If it isn&apos;t there then we can&apos;t return anything sensible.</para>
<para>We deal with this by letting you pass in an optional pointer to a boolean. We will set its value to true or false depending on whether or not we found the property you wanted. If it is true, the return value is guaranteed to be whatever is in the map. If it is false, the return value will be uninitialized.</para>
<para><simplesect kind="note"><para>For the purposes of this function, a property that is present but that has the wrong type is the same as a property that is not present in the map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of desired property (if present)</para>
</simplesect>
This function will give you back the named property as a double-precision floating point number if it is present and that is its proper type. It will not attempt to cast other types to double.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the property is present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns the requested property as a <computeroutput>double</computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>true</computeroutput>. On failure, returns <computeroutput>0</computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="235" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="235" bodyend="261" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="129" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a8c1f4fe9794b6b170a1b0b56467d6aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::string_property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, bool *is_present)</argsstring>
        <name>string_property</name>
        <qualifiedname>tracktable::string_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_present</declname>
        </param>
        <briefdescription>
<para>Retrieve a string property. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a string-valued property from the map.</para>
<para>This accessor will let you retrieve the value of a string property. The catch is that we don&apos;t know whether or not the property is there to begin with. If it isn&apos;t there then we can&apos;t return anything sensible.</para>
<para>We deal with this by letting you pass in an optional pointer to a boolean. We will set its value to true or false depending on whether or not we found the property you wanted. If it is true, the return value is guaranteed to be whatever is in the map. If it is false, the return value will be uninitialized.</para>
<para><simplesect kind="note"><para>For the purposes of this function, a property that is present but that has the wrong type is the same as a property that is not present in the map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of desired property (if present)</para>
</simplesect>
This function will give you back the named property as a <computeroutput>string_type</computeroutput> if it is present and that is its proper type. It will not attempt to cast other types to <computeroutput>string_type</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the property is present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns the requested property as a <computeroutput>string_type</computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>true</computeroutput>. On failure, returns an uninitialized <computeroutput>string_type</computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="345" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="345" bodyend="371" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="110" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a148d68ca8415703578fb7ee162023fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::timestamp_property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, bool *is_present)</argsstring>
        <name>timestamp_property</name>
        <qualifiedname>tracktable::timestamp_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_present</declname>
        </param>
        <briefdescription>
<para>Retrieve a timestamp property. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a timestamp-valued property from the map.</para>
<para>This accessor will let you retrieve the value of a timestamp property. The catch is that we don&apos;t know whether or not the property is there to begin with. If it isn&apos;t there then we can&apos;t return anything sensible.</para>
<para>We deal with this by letting you pass in an optional pointer to a boolean. We will set its value to true or false depending on whether or not we found the property you wanted. If it is true, the return value is guaranteed to be whatever is in the map. If it is false, the return value will be uninitialized.</para>
<para><simplesect kind="note"><para>For the purposes of this function, a property that is present but that has the wrong type is the same as a property that is not present in the map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of desired property (if present)</para>
</simplesect>
This function will give you back the named property as a <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> if it is present and that is its proper type. It will not attempt to cast other types to <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the property is present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns the requested property as a <computeroutput><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>true</computeroutput>. On failure, returns an <computeroutput>uninitialized timestamp</computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="398" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="398" bodyend="424" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="147" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1abc4cee72290a2cf445fcb1585ed37ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT NullValue tracktable::nullvalue_property</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, bool *is_present)</argsstring>
        <name>nullvalue_property</name>
        <qualifiedname>tracktable::nullvalue_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_present</declname>
        </param>
        <briefdescription>
<para>Retrieve a null property. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a null-valued property from the map.</para>
<para>This accessor will let you retrieve the value of a null property. The catch is that we don&apos;t know whether or not the property is there to begin with. If it isn&apos;t there then we can&apos;t return anything sensible.</para>
<para>We deal with this by letting you pass in an optional pointer to a boolean. We will set its value to true or false depending on whether or not we found the property you wanted. If it is true, the return value is guaranteed to be whatever is in the map. If it is false, the return value will be uninitialized.</para>
<para><simplesect kind="note"><para>For the purposes of this function, a property that is present but that has the wrong type is the same as a property that is not present in the map.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to interrogate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to find </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of desired property (if present)</para>
</simplesect>
This function will give you back the named property as a <ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref> if it is present and that is its proper type. It will not attempt to cast other types to <ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Property to search for in the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">is_present</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating if the property is present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns the requested property as a <computeroutput><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref></computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>true</computeroutput>. On failure, returns an <computeroutput>uninitialized <ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref></computeroutput> and sets <computeroutput>*is_present</computeroutput> to <computeroutput>false</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="451" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="451" bodyend="477" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="165" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a5b7d7a4b2e65520ccadbc79f361e4b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PropertyValueT</type>
        <definition>TRACKTABLE_CORE_EXPORT PropertyValueT tracktable::property_with_default</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, PropertyValueT const &amp;default_value)</argsstring>
        <name>property_with_default</name>
        <qualifiedname>tracktable::property_with_default</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>PropertyValueT const &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Retrieve a property or some default value. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a property value or a default if it&apos;s not there.</para>
<para>This method of retrieving a named property will never fail or throw an exception. You will either get back the value of the property you requested as your desired type or else you will get back your default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map for lookup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return if property is not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function works with variants instead of trying to cast down to a more specific type. As such, it does not care what the underlying type is for the requested value, only whether or not it&apos;s there. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="498" column="16" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="498" bodyend="514" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="207" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a2f9de743cfe526a56da8f265c50ac02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>TRACKTABLE_CORE_EXPORT double tracktable::real_property_with_default</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, double default_value)</argsstring>
        <name>real_property_with_default</name>
        <qualifiedname>tracktable::real_property_with_default</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Retrieve a numeric property or some default value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method of retrieving a named property will never fail or throw an exception. You will either get back the value of the property you requested as your desired type or else you will get back your default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map for lookup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return if property is not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A property that is present but not numeric is treated as if the property were not present at all. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="533" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="533" bodyend="540" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="208" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab21994b2954997ce32361071fb34a6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::string_property_with_default</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, string_type const &amp;default_value)</argsstring>
        <name>string_property_with_default</name>
        <qualifiedname>tracktable::string_property_with_default</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Retrieve a string property or some default value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method of retrieving a named property will never fail or throw an exception. You will either get back the value of the property you requested as your desired type or else you will get back your default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map for lookup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return if property is not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A property that is present but not numeric is treated as if the property were not present at all. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="574" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="574" bodyend="581" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="209" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a3b8557907d36a6e588718542dac1684b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::timestamp_property_with_default</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, Timestamp const &amp;default_value)</argsstring>
        <name>timestamp_property_with_default</name>
        <qualifiedname>tracktable::timestamp_property_with_default</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Retrieve a timestamp property or some default value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method of retrieving a named property will never fail or throw an exception. You will either get back the value of the property you requested as your desired type or else you will get back your default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map for lookup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return if property is not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A property that is present but not numeric is treated as if the property were not present at all. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="600" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="600" bodyend="607" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="210" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a8384407ced81ac29e37c7694816252ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT NullValue tracktable::nullvalue_property_with_default</definition>
        <argsstring>(PropertyMap const &amp;properties, string_type const &amp;name, NullValue const &amp;default_value)</argsstring>
        <name>nullvalue_property_with_default</name>
        <qualifiedname>tracktable::nullvalue_property_with_default</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref> const &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Retrieve a nullvalue property or some default value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method of retrieving a named property will never fail or throw an exception. You will either get back the value of the property you requested as your desired type or else you will get back your default value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map for lookup </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of property to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return if property is not present</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>A property that is present but not numeric is treated as if the property were not present at all. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="626" column="11" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="626" bodyend="633" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="211" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a00e54925770f86a28d15e6142682bbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::property_map_to_string</definition>
        <argsstring>(tracktable::PropertyMap const &amp;properties)</argsstring>
        <name>property_map_to_string</name>
        <qualifiedname>tracktable::property_map_to_string</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">tracktable::PropertyMap</ref> const &amp;</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Render a property map&apos;s contents as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function constructs a human-readable representation of a named property map.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">properties</parametername>
</parameternamelist>
<parameterdescription>
<para>Property map to write out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Contents of property map as a string_type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="646" column="13" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="646" bodyend="676" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="213" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a73853fb1816c05b8a0337695ef0de7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT bool</type>
        <definition>TRACKTABLE_CORE_EXPORT bool tracktable::operator==</definition>
        <argsstring>(const PropertyMap &amp;pm1, const PropertyMap &amp;pm2)</argsstring>
        <name>operator==</name>
        <qualifiedname>tracktable::operator==</qualifiedname>
        <param>
          <type>const <ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>pm1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>pm2</declname>
        </param>
        <briefdescription>
<para>Provides an overloaded equality operator that that accounts for floating point epsilon differences. </para>
        </briefdescription>
        <detaileddescription>
<para>Except for the call to <computeroutput>compare(const PropertyValueT&amp;, const PropertyValueT&amp;, double, bool)</computeroutput> this function is identical to the default <computeroutput>std::map</computeroutput> comparator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" line="679" column="29" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.cpp" bodystart="679" bodyend="711" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="220" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1adc0644c4344b16b33578ef08b6814c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_property</definition>
        <argsstring>(PropertyMap &amp;properties, string_type const &amp;name, int64_t value)</argsstring>
        <name>set_property</name>
        <qualifiedname>tracktable::set_property</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a1025d06e8ca7ebb7e66de16aa92fdc12" kindref="member">PropertyMap</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>string_type const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" line="198" column="29" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyMap.h" declline="198" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a593c00aed52d24a976d061a5abb5b18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tracktable::string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT tracktable::string_type tracktable::property_type_as_string</definition>
        <argsstring>(tracktable::PropertyValueT const &amp;p)</argsstring>
        <name>property_type_as_string</name>
        <qualifiedname>tracktable::property_type_as_string</qualifiedname>
        <param>
          <type>tracktable::PropertyValueT const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return a property&apos;s data type as a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" line="196" column="25" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" bodystart="196" bodyend="213" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" declline="255" declcolumn="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aa7ddc3390fd5114ded0099f356dc2386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>TRACKTABLE_CORE_EXPORT bool tracktable::is_property_null</definition>
        <argsstring>(PropertyValueT const &amp;value)</argsstring>
        <name>is_property_null</name>
        <qualifiedname>tracktable::is_property_null</qualifiedname>
        <param>
          <type>PropertyValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Check whether a particular property is null. </para>
        </briefdescription>
        <detaileddescription>
<para>Check to see whether a property value is null.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Property value to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/false (null or not)</para>
</simplesect>
<simplesect kind="return"><para>True/false depending on whether or not the supplied value is null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" line="221" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" bodystart="221" bodyend="224" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" declline="229" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1acc66869025d3eba6afdee9e1a0b203aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PropertyUnderlyingType</type>
        <definition>TRACKTABLE_CORE_EXPORT PropertyUnderlyingType tracktable::property_underlying_type</definition>
        <argsstring>(PropertyValue const  &amp;value)</argsstring>
        <name>property_underlying_type</name>
        <qualifiedname>tracktable::property_underlying_type</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref> const &amp;</type>
          <declname>value</declname>
          <defname>pv</defname>
        </param>
        <briefdescription>
<para>Get a property&apos;s underlying type. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a numeric constant that specifies the type stored in a property. This function is meant to help with serialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" line="229" column="24" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" bodystart="229" bodyend="232" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" declline="238" declcolumn="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1adede362c73ae0a3314510cfd9a748fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>TRACKTABLE_CORE_EXPORT std::ostream &amp; tracktable::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, NullValue const  &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>tracktable::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classtracktable_1_1_null_value" kindref="compound">NullValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write a null value to a stream as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">os</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">box</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtracktable_1_1_box" kindref="compound">Box</ref> to write to string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" line="234" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" bodystart="234" bodyend="258" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" declline="161" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af6306ca41f5dd6a2eaf56b3f1cbdd2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT int</type>
        <definition>TRACKTABLE_CORE_EXPORT int tracktable::compare</definition>
        <argsstring>(const PropertyValue &amp;value1, const PropertyValue &amp;value2, double difference=1.0, bool is_epsilon_difference=true)</argsstring>
        <name>compare</name>
        <qualifiedname>tracktable::compare</qualifiedname>
        <param>
          <type>const <ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref> &amp;</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref> &amp;</type>
          <declname>value2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>difference</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_epsilon_difference</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Provides a total order comparison of all <ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref> instances allowing for floating point epsilon differences. </para>
        </briefdescription>
        <detaileddescription>
<para>Compares two property values to provide a total ordering.</para>
<para>When the property values are of different types the relationship between their underlying value types will be returned based on the ordering of the parameters.</para>
<para>When the property values are of the same type a logical comparison of the values is performed.</para>
<para>When the parameters contain double values the parameters difference and <computeroutput>is_epsilon_difference</computeroutput> will control tests of equality. Machine epsilon is an upper bound on the rounding error that can occur in floating point arithmetic for a specific type.</para>
<para>Also see:</para>
<para><ulink url="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems">https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems</ulink> <ulink url="https://en.wikipedia.org/wiki/Machine_epsilon">https://en.wikipedia.org/wiki/Machine_epsilon</ulink> <ulink url="https://www.boost.org/doc/libs/1_72_0/libs/math/doc/html/math_toolkit/float_comparison.html">https://www.boost.org/doc/libs/1_72_0/libs/math/doc/html/math_toolkit/float_comparison.html</ulink> Knuth D.E. The art of computer programming, vol II, section 4.2, Floating-Point Comparison 4.2.2, pages 198-220</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first property value instance to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second property value instance to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">difference</parametername>
</parameternamelist>
<parameterdescription>
<para>The allowed difference between doubles to still maintain equality. The meaning of this parameter is controlled by is_epsilon_difference </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_epsilon_difference</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, difference will be treated as the machine specific epsilon difference and if false as a relative difference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if value1 &lt; value2, 0 if value1 == value2, 1 if value1 &gt; value2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" line="325" column="28" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.cpp" bodystart="325" bodyend="329" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" declline="222" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a82cc540961f81346f298033252fab2cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref></type>
        <definition>PropertyValue tracktable::make_null</definition>
        <argsstring>(PropertyUnderlyingType null_type)</argsstring>
        <name>make_null</name>
        <qualifiedname>tracktable::make_null</qualifiedname>
        <param>
          <type>PropertyUnderlyingType</type>
          <declname>null_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="190" column="22" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a56356945c2bca38b921dd7ef7a75f538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename text_type</type>
          </param>
        </templateparamlist>
        <type>PropertyUnderlyingType</type>
        <definition>PropertyUnderlyingType tracktable::string_to_property_type</definition>
        <argsstring>(text_type const &amp;input)</argsstring>
        <name>string_to_property_type</name>
        <qualifiedname>tracktable::string_to_property_type</qualifiedname>
        <param>
          <type>text_type const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Utility method: convert a string to a PropertyUnderlyingType. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="245" column="24" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab76139cfda2672d0f8ede94fce8e5ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename source_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref></type>
        <definition>PropertyValue tracktable::to_property_variant</definition>
        <argsstring>(source_type const &amp;source, PropertyUnderlyingType thing_type)</argsstring>
        <name>to_property_variant</name>
        <qualifiedname>tracktable::to_property_variant</qualifiedname>
        <param>
          <type>source_type const &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>PropertyUnderlyingType</type>
          <declname>thing_type</declname>
        </param>
        <briefdescription>
<para>Utility method: convert a source type (usually a string) to a <ref refid="namespacetracktable_1aa8b143903829a3cf16be557ebc3ea855" kindref="member">PropertyValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" line="262" column="15" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/PropertyValue.h" bodystart="262" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a7dc2b5b02c3a8c2576ab9bb74799c668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacetracktable_1aa114f56d4173aa416688654b43ab8b4a" kindref="member">Date</ref></type>
        <definition>const Date tracktable::jan_1_1900</definition>
        <argsstring>(1900, boost::date_time::Jan, 1)</argsstring>
        <name>jan_1_1900</name>
        <qualifiedname>tracktable::jan_1_1900</qualifiedname>
        <param>
          <type>1900</type>
        </param>
        <param>
          <type>boost::date_time::Jan</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
<para>Beginning of time. </para>
        </briefdescription>
        <detaileddescription>
<para>We&apos;re going to use this as our standard &quot;before any reasonable
timestamp&quot; value. This is because we can&apos;t actually use time <computeroutput>t = 0</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="103" column="12" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="103" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a157ef0bc159518a6e7605c614f27ff6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>const Timestamp tracktable::BeginningOfTime</definition>
        <argsstring>(jan_1_1900)</argsstring>
        <name>BeginningOfTime</name>
        <qualifiedname>tracktable::BeginningOfTime</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a7dc2b5b02c3a8c2576ab9bb74799c668" kindref="member">jan_1_1900</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="104" column="17" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="104" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a7c9e7e2fd894f0f01e980ad24ba558f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::time_from_string</definition>
        <argsstring>(std::string const &amp;tstring)</argsstring>
        <name>time_from_string</name>
        <qualifiedname>tracktable::time_from_string</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>tstring</declname>
        </param>
        <briefdescription>
<para>Construct a timestamp from a <computeroutput>std::string</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>This function will convert a string such as <computeroutput>&quot;2014-03-05 13:44:06&quot;</computeroutput> into a <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> that represents <computeroutput>March 5, 2014 at 13:44:06</computeroutput>.</para>
<para>The date/time format for this particular function is fixed. If you need more flexible parsing, please use the Boost date/time IO routines:</para>
<para><ulink url="http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html">http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html</ulink></para>
<para>We will provide a friendlier way to do this in an upcoming version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tstring</parametername>
</parameternamelist>
<parameterdescription>
<para>String containing formatted time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> derived from string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="125" column="34" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="125" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aa374661c651f1a4ca3a184d7c93c2c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::time_to_string</definition>
        <argsstring>(Timestamp const &amp;ts)</argsstring>
        <name>time_to_string</name>
        <qualifiedname>tracktable::time_to_string</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Convert a timestamp to a <computeroutput>std::string</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>This function will convert a timestamp that represents <computeroutput>March 5, 2014 at 13:44:06</computeroutput> in to a string such as <computeroutput>&quot;2014-03-05 13:44:06&quot;</computeroutput></para>
<para>The date/time format for this particular function is fixed. If you need more flexible parsing, please use the Boost date/time IO routines:</para>
<para><ulink url="http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html">http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html</ulink></para>
<para>We will provide a friendlier way to do this in an upcoming version.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> to be converted to a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String derived from <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="144" column="36" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="144" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a21e4fd0196a08a3861a7f6dce65740ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::no_such_timestamp</definition>
        <argsstring>()</argsstring>
        <name>no_such_timestamp</name>
        <qualifiedname>tracktable::no_such_timestamp</qualifiedname>
        <briefdescription>
<para>Return a timestamp containing <computeroutput>boost::posix_time::not_a_date_time</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>We may need to create an invalid timestamp to signal &quot;not yet
initialized&quot;. This function does that.</para>
<para><simplesect kind="note"><para>I think this will fail to translate into a Python datetime. Need to test this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="155" column="34" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="155" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1afb8d7c6a30a4c9ec67ae3f61d51f4159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT bool</type>
        <definition>TRACKTABLE_CORE_EXPORT bool tracktable::is_timestamp_valid</definition>
        <argsstring>(Timestamp const &amp;ts)</argsstring>
        <name>is_timestamp_valid</name>
        <qualifiedname>tracktable::is_timestamp_valid</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Check to see whether a timestamp is valid. </para>
        </briefdescription>
        <detaileddescription>
<para>Boost&apos;s date/time library can return timestamps that do not represent any real date. This function tells you whether you&apos;ve got a &quot;real&quot; timestamp or one of those special values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> to checked for validity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating valid/invalid <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="167" column="29" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="167" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a0fe5ea9cb42fb02d52599a06b60eb47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::truncate_fractional_seconds</definition>
        <argsstring>(Timestamp const &amp;input)</argsstring>
        <name>truncate_fractional_seconds</name>
        <qualifiedname>tracktable::truncate_fractional_seconds</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Truncate a timestamp downward to the nearest second. </para>
        </briefdescription>
        <detaileddescription>
<para>We have sub-second precision on these timestamps <ndash/> all the way down to nanoseconds if we really want <ndash/> but there are often cases when we only care about precision to a single second. This gives us a clean way to get there.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> with fractional seconds to be truncated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> without truncated seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="180" column="34" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="180" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a59976384412cbb9641b12e82d15a7a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT Timestamp tracktable::round_to_nearest_second</definition>
        <argsstring>(Timestamp const &amp;input)</argsstring>
        <name>round_to_nearest_second</name>
        <qualifiedname>tracktable::round_to_nearest_second</qualifiedname>
        <param>
          <type><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Round a timestamp to the nearest second. </para>
        </briefdescription>
        <detaileddescription>
<para>A time with a fractional component of at least 500 milliseconds will be rounded up to the next whole second. A time with a fractional component of fewer than 500 milliseconds will be rounded down to the previous whole second.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> with to be rounds to nearest seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rounded <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">Timestamp</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="193" column="34" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="193" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a64f5ac8ce7711699fad2cbc547f7f3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::hours</definition>
        <argsstring>(int num_hours)</argsstring>
        <name>hours</name>
        <qualifiedname>tracktable::hours</qualifiedname>
        <param>
          <type>int</type>
          <declname>num_hours</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in hours. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of hours.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_hours</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hours to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of hours </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="204" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="204" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a9375f2bb557f1e66da1ee22f7e3fcffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::minutes</definition>
        <argsstring>(int num_minutes)</argsstring>
        <name>minutes</name>
        <qualifiedname>tracktable::minutes</qualifiedname>
        <param>
          <type>int</type>
          <declname>num_minutes</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in minutes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of minutes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_minutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of minutes to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of minutes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="215" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="215" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a7f915c14e8fe5ac6b656336fbeb88d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::seconds</definition>
        <argsstring>(int num_seconds)</argsstring>
        <name>seconds</name>
        <qualifiedname>tracktable::seconds</qualifiedname>
        <param>
          <type>int</type>
          <declname>num_seconds</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in seconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of seconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="226" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="226" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a83e8d6c69f88b541a68015d3fb8f5779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::milliseconds</definition>
        <argsstring>(int64_t num_milliseconds)</argsstring>
        <name>milliseconds</name>
        <qualifiedname>tracktable::milliseconds</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>num_milliseconds</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of milliseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of milliseconds to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="237" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="237" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a9fc7f08f9eb0fcff8a5076ea0d6a8355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::microseconds</definition>
        <argsstring>(int64_t num_microseconds)</argsstring>
        <name>microseconds</name>
        <qualifiedname>tracktable::microseconds</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>num_microseconds</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of seconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_microseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of microseconds to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of microseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="248" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="248" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a35c0a2d0430b4e79a2d852882815f092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT Duration</type>
        <definition>TRACKTABLE_CORE_EXPORT Duration tracktable::days</definition>
        <argsstring>(int num_days)</argsstring>
        <name>days</name>
        <qualifiedname>tracktable::days</qualifiedname>
        <param>
          <type>int</type>
          <declname>num_days</declname>
        </param>
        <briefdescription>
<para>Create a duration measured in days. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method to create a Duration that is an integral number of days.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_days</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of days to assigned to the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Duration with new number of days </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="259" column="33" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="259" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aa74215060fda695080e79d7990e4b617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename stream_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::imbue_stream_with_timestamp_output_format</definition>
        <argsstring>(stream_type &amp;stream, std::string const &amp;format)</argsstring>
        <name>imbue_stream_with_timestamp_output_format</name>
        <qualifiedname>tracktable::imbue_stream_with_timestamp_output_format</qualifiedname>
        <param>
          <type>stream_type &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Change the string format for timestamp parsing. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will change the format used to parse timestamps. The effect is process-wide.</para>
<para>There are many flags available for use in the format. The following web page documents them all:</para>
<para><ulink url="http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html">http://www.boost.org/doc/libs/1_55_0/doc/html/date_time/date_time_io.html</ulink></para>
<para>The default value is <computeroutput>&quot;%Y-%m-%d %H:%M:%S&quot;</computeroutput>, corresponding to timestamps such as <computeroutput>&quot;2014-04-05 12:33:40&quot;</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to add timestamp information to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the timestamp </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="278" column="7" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af51e53e5b1800e016c16a2707dfaa48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_default_timestamp_output_format</definition>
        <argsstring>(string_type const &amp;format)</argsstring>
        <name>set_default_timestamp_output_format</name>
        <qualifiedname>tracktable::set_default_timestamp_output_format</qualifiedname>
        <param>
          <type>string_type const &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Set the default format for timestamp output. </para>
        </briefdescription>
        <detaileddescription>
<para>This format will be used when printing timestamps in (for example) trajectory points.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="293" column="29" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="293" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aaa4f2c20a79f221485406a892f4ee5db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::default_timestamp_output_format</definition>
        <argsstring>()</argsstring>
        <name>default_timestamp_output_format</name>
        <qualifiedname>tracktable::default_timestamp_output_format</qualifiedname>
        <briefdescription>
<para>Get the default format for timestamp output. </para>
        </briefdescription>
        <detaileddescription>
<para>This format will be used when printing timestamps in (for example) trajectory points.</para>
<para><simplesect kind="return"><para>Format string currently set as default </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="303" column="36" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="303" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aaa693ab90707c472a583d21e31c482dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_default_timestamp_input_format</definition>
        <argsstring>(string_type const &amp;format)</argsstring>
        <name>set_default_timestamp_input_format</name>
        <qualifiedname>tracktable::set_default_timestamp_input_format</qualifiedname>
        <param>
          <type>string_type const &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Set the default format for timestamp input. </para>
        </briefdescription>
        <detaileddescription>
<para>This format will be used when printing timestamps in (for example) trajectory points unless otherwise overridden.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="314" column="29" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="314" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1acbbc27bed11317eaf9ca4d47050d8ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT string_type</type>
        <definition>TRACKTABLE_CORE_EXPORT string_type tracktable::default_timestamp_input_format</definition>
        <argsstring>()</argsstring>
        <name>default_timestamp_input_format</name>
        <qualifiedname>tracktable::default_timestamp_input_format</qualifiedname>
        <briefdescription>
<para>Get the default format for timestamp input. </para>
        </briefdescription>
        <detaileddescription>
<para>This format will be used when parsing timestamps.</para>
<para><simplesect kind="return"><para>Format string currently set as default </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" line="323" column="36" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Timestamp.h" declline="323" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad9cf642684ccf03542836d3edd632971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TRACKTABLE_CORE_EXPORT <ref refid="classtracktable_1_1_u_u_i_d_generator_1a84f75235f9634d619b6aff6dde218d85" kindref="member">UUIDGenerator::pointer</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT UUIDGenerator::pointer tracktable::AutomaticUUIDGenerator</definition>
        <argsstring>(BoostRandomUUIDGenerator&lt; boost::random::mt19937 &gt;::create())</argsstring>
        <name>AutomaticUUIDGenerator</name>
        <qualifiedname>tracktable::AutomaticUUIDGenerator</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_boost_random_u_u_i_d_generator" kindref="compound">BoostRandomUUIDGenerator</ref>&lt; boost::random::mt19937 &gt;</type>
          <declname>::create</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" line="36" column="49" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" declline="36" declcolumn="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad719bb5f2c724e6033e6e894230250a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtracktable_1_1_u_u_i_d_generator_1a84f75235f9634d619b6aff6dde218d85" kindref="member">UUIDGenerator::pointer</ref></type>
        <definition>TRACKTABLE_CORE_EXPORT UUIDGenerator::pointer tracktable::automatic_uuid_generator</definition>
        <argsstring>()</argsstring>
        <name>automatic_uuid_generator</name>
        <qualifiedname>tracktable::automatic_uuid_generator</qualifiedname>
        <briefdescription>
<para>Get the current global automatic uuid generator. </para>
        </briefdescription>
        <detaileddescription>
<para>A global automatic uuid generator is used to avoid the cost of continuously instantiating a new generator, which could have a significant impact</para>
<para>This could be used to generate uuids using the same mechanisms as the current global generator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" line="38" column="26" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" bodystart="38" bodyend="41" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.h" declline="295" declcolumn="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a619756d3896d84d4e6e8293fb58889fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_CORE_EXPORT void tracktable::set_automatic_uuid_generator</definition>
        <argsstring>(UUIDGenerator::pointer new_random_generator)</argsstring>
        <name>set_automatic_uuid_generator</name>
        <qualifiedname>tracktable::set_automatic_uuid_generator</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_u_u_i_d_generator_1a84f75235f9634d619b6aff6dde218d85" kindref="member">UUIDGenerator::pointer</ref></type>
          <declname>new_random_generator</declname>
        </param>
        <briefdescription>
<para>Set the global automatic uuid generator. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows the global uuid generator to be changed from the default generator to any generator implementing the <computeroutput>generate()</computeroutput> method of <computeroutput><ref refid="classtracktable_1_1_u_u_i_d_generator" kindref="compound">UUIDGenerator</ref></computeroutput>.</para>
<para>The default generator is a boost random uuid generator using mt19937 for random number generation.</para>
<para>The <computeroutput><ref refid="classtracktable_1_1_boost_random_u_u_i_d_generator" kindref="compound">BoostRandomUUIDGenerator</ref></computeroutput> template can be used to quickly create generators employing other random number generation approaches. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" line="43" column="8" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.cpp" bodystart="43" bodyend="46" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/UUID.h" declline="308" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab4029a0b4442964fde60b7a49e507fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_name</definition>
        <argsstring>(std::ostream &amp;_o, const std::string &amp;_name)</argsstring>
        <name>write_name</name>
        <qualifiedname>tracktable::write_name</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="118" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a7650e1076bceffeaa02b1aca4a4871cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_name</definition>
        <argsstring>(std::ostream &amp;_o)</argsstring>
        <name>write_name</name>
        <qualifiedname>tracktable::write_name</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="119" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1aa62ef2d272d2a4e08298c3a914f63033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_timespan</definition>
        <argsstring>(std::ostream &amp;_o, const tracktable::Timestamp &amp;_start, const tracktable::Timestamp &amp;_end)</argsstring>
        <name>write_timespan</name>
        <qualifiedname>tracktable::write_timespan</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">tracktable::Timestamp</ref> &amp;</type>
          <declname>_start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetracktable_1a682e5fb98918f65770834e07ff51d21c" kindref="member">tracktable::Timestamp</ref> &amp;</type>
          <declname>_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="121" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a98a4b58794aafaa77c132c27711cef62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_timespan</definition>
        <argsstring>(std::ostream &amp;_o)</argsstring>
        <name>write_timespan</name>
        <qualifiedname>tracktable::write_timespan</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="125" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad9f1e1fc6591f97acc613cfd7ac2a250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_styleid</definition>
        <argsstring>(std::ostream &amp;_o, const std::string &amp;_id)</argsstring>
        <name>write_styleid</name>
        <qualifiedname>tracktable::write_styleid</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="127" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a8dddb588ddd2a0d87f615cc74483d578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::write_styleid</definition>
        <argsstring>(std::ostream &amp;_o)</argsstring>
        <name>write_styleid</name>
        <qualifiedname>tracktable::write_styleid</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="131" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a8fc3e8782cc642e15fbae0c76c8a668e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tracktable::writeStyle</definition>
        <argsstring>(std::ostream &amp;_o)</argsstring>
        <name>writeStyle</name>
        <qualifiedname>tracktable::writeStyle</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>_o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" line="135" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/KmlOut.cpp" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab990694932f4d6311d72a53a4bc1d9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename iter_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtracktable_1_1_skip_comments_reader" kindref="compound">SkipCommentsReader</ref>&lt; iter_type &gt;</type>
        <definition>SkipCommentsReader&lt; iter_type &gt; tracktable::make_skip_comments_reader</definition>
        <argsstring>(iter_type start_iter, iter_type end_iter)</argsstring>
        <name>make_skip_comments_reader</name>
        <qualifiedname>tracktable::make_skip_comments_reader</qualifiedname>
        <param>
          <type>iter_type</type>
          <declname>start_iter</declname>
        </param>
        <param>
          <type>iter_type</type>
          <declname>end_iter</declname>
        </param>
        <briefdescription>
<para>Create the <ref refid="classtracktable_1_1_skip_comments_reader" kindref="compound">SkipCommentsReader</ref> for a given range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">start_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to start from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Iteratror to end at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/SkipCommentsReader.h" line="468" column="3" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/RW/SkipCommentsReader.h" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a79d16c21e46fc8557e8cdb75f860b7e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SearchBoxT</type>
          </param>
          <param>
            <type>class PointIteratorT</type>
          </param>
          <param>
            <type>class OutputIteratorT</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tracktable::cluster_with_dbscan</definition>
        <argsstring>(PointIteratorT input_begin, PointIteratorT input_end, SearchBoxT search_box_half_span, int minimum_cluster_size, OutputIteratorT output_sink)</argsstring>
        <name>cluster_with_dbscan</name>
        <qualifiedname>tracktable::cluster_with_dbscan</qualifiedname>
        <param>
          <type>PointIteratorT</type>
          <declname>input_begin</declname>
        </param>
        <param>
          <type>PointIteratorT</type>
          <declname>input_end</declname>
        </param>
        <param>
          <type>SearchBoxT</type>
          <declname>search_box_half_span</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minimum_cluster_size</declname>
        </param>
        <param>
          <type>OutputIteratorT</type>
          <declname>output_sink</declname>
        </param>
        <briefdescription>
<para>Generate cluster labels for a set of points. </para>
        </briefdescription>
        <detaileddescription>
<para>This function runs DBSCAN on a list of points and returns its results as a vector of integers, one for each input point.</para>
<para>When you call <computeroutput>cluster_with_dbscan</computeroutput> you must indicate the type of point (and thus the coordinate space) that you want to use for the clustering. This lets you choose (for example) to run in Cartesian space rather than longitude/latitude space if you&apos;re sure your points don&apos;t run into the poles or the longitude discontinuity at +/= 180.</para>
<para>Example:</para>
<para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tracktable::cartesian2d::BasePoint<sp/>point2d;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;tracktable::cartesian2d::BasePoint&gt;<sp/>my_points;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;<sp/>cluster_labels;</highlight></codeline>
<codeline><highlight class="normal">point2d<sp/>search_box(0.5,<sp/>0.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_cluster_size<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_clusters<sp/>=<sp/><ref refid="namespacetracktable_1a79d16c21e46fc8557e8cdb75f860b7e8" kindref="member">cluster_with_dbscan&lt;point2d&gt;</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>my_points.begin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>my_points.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>search_box,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>min_cluster_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::back_inserter(cluster_labels)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>The search box must be specified in the coordinate system in which you want to do the clustering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for beginning of input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for end of input points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">search_box_half_span</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance defining &quot;nearby&quot; in all dimensions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minimum_cluster_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of neighbors for core points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_sink</parametername>
</parameternamelist>
<parameterdescription>
<para>(Vertex ID, Cluster ID) for each point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of clusters discovered</para>
</simplesect>
You can also pass in points as a <computeroutput>std::pair&lt;MyPoint, Foo&gt;</computeroutput> where Foo is your own arbitrary ID. In that case, the returned labels will be (Foo, int). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/ComputeDBSCANClustering.h" line="125" column="5" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/ComputeDBSCANClustering.h" bodystart="125" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1af2efd19849e0ceccacfc7ffb7a0e31fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ClusterLabelIteratorT</type>
          </param>
          <param>
            <type>typename OutputIteratorT</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int tracktable::build_cluster_membership_lists</definition>
        <argsstring>(ClusterLabelIteratorT label_begin, ClusterLabelIteratorT label_end, OutputIteratorT output_membership_lists)</argsstring>
        <name>build_cluster_membership_lists</name>
        <qualifiedname>tracktable::build_cluster_membership_lists</qualifiedname>
        <param>
          <type>ClusterLabelIteratorT</type>
          <declname>label_begin</declname>
        </param>
        <param>
          <type>ClusterLabelIteratorT</type>
          <declname>label_end</declname>
        </param>
        <param>
          <type>OutputIteratorT</type>
          <declname>output_membership_lists</declname>
        </param>
        <briefdescription>
<para>Convert cluster labels into cluster membership lists. </para>
        </briefdescription>
        <detaileddescription>
<para>The label output from <computeroutput>cluster_with_dbscan</computeroutput> is a list of (vertex_id, cluster_id) pairs. It is often useful to have cluster membership represented instead as lists of the vertices that belong to each cluster. This function converts a list of IDs to a list of members. The output will be saved as a sequence of <computeroutput>std::vector</computeroutput>s written in order of ascending cluster ID.</para>
<para>Example:</para>
<para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;my_point,<sp/>my_id&gt;<sp/>labeled_point_type;</highlight></codeline>
<codeline><highlight class="normal">tyepdef<sp/>std::pair&lt;my_id,<sp/>int&gt;<sp/>cluster_label_type;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;labeled_point_type&gt;<sp/>my_labeled_points;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;cluster_label_type&gt;<sp/>cluster_labels;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_clusters<sp/>=<sp/><ref refid="namespacetracktable_1a79d16c21e46fc8557e8cdb75f860b7e8" kindref="member">tracktable::cluster_with_dbscan</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>my_labeled_points.begin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>my_labeled_points.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>search_box,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>minimum_cluster_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::back_inserter(cluster_labels)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;my_id&gt;<sp/>cluster_member_list_type;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;cluster_member_list_type&gt;<sp/>membership_lists;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespacetracktable_1af2efd19849e0ceccacfc7ffb7a0e31fa" kindref="member">tracktable::build_cluster_membership_lists</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cluster_labels.begin(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cluster_labels.end(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::back_inserter(membership_lists)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for beginning of DBSCAN cluster labels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for end of DBSCAN cluster labels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_membership_lists</parametername>
</parameternamelist>
<parameterdescription>
<para>(Vertex ID, Cluster ID) for each point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of clusters discovered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/ComputeDBSCANClustering.h" line="193" column="5" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/ComputeDBSCANClustering.h" bodystart="193" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ac26e7c9d3a8d12ceed4dd7b7f745765b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename trajectory_type</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tracktable::distance_geometry_by_distance</definition>
        <argsstring>(trajectory_type const &amp;trajectory, unsigned int depth)</argsstring>
        <name>distance_geometry_by_distance</name>
        <qualifiedname>tracktable::distance_geometry_by_distance</qualifiedname>
        <param>
          <type>trajectory_type const &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Create distance geometry signature with samples by distance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the multilevel distance geometry for a given trajectory. Each level <emphasis>d</emphasis> approximates the input trajectory with <emphasis>d</emphasis> equal-length line segments. The distance geometry values for that level are the lengths of all <emphasis>d</emphasis> line segments, normalized to lie between 0 and 1.</para>
<para>The D-level distance geometry for a curve will result in (D * (D+1)) / 2 separate values.</para>
<para>This implementation creates the endpoints of the line segments by sampling the trajectory at fractions of total distance traveled. To sample by total duration, use <ref refid="namespacetracktable_1ad311e0eda396d74a316f442c0d740e64" kindref="member">distance_geometry_by_time()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>input curve to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>How many levels to compute. Must be greater than zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;double&gt; containing the distance geometry values laid out consecutively by increasing depth. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" line="68" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ad311e0eda396d74a316f442c0d740e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename trajectory_type</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tracktable::distance_geometry_by_time</definition>
        <argsstring>(trajectory_type const &amp;trajectory, unsigned int depth)</argsstring>
        <name>distance_geometry_by_time</name>
        <qualifiedname>tracktable::distance_geometry_by_time</qualifiedname>
        <param>
          <type>trajectory_type const &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>Create distance geometry signature with samples by time. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the multilevel distance geometry for a given trajectory. Each level <emphasis>d</emphasis> approximates the input trajectory with <emphasis>d</emphasis> equal-length line segments. The distance geometry values for that level are the lengths of all <emphasis>d</emphasis> line segments, normalized to lie between 0 and 1.</para>
<para>The D-level distance geometry for a curve will result in (D * (D+1)) / 2 separate values.</para>
<para>This implementation creates the endpoints of the line segments by sampling the trajectory at fractions of total duration traveled. To sample by total travel distance, use <ref refid="namespacetracktable_1ac26e7c9d3a8d12ceed4dd7b7f745765b" kindref="member">distance_geometry_by_distance()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>input curve to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>How many levels to compute. Must be greater than zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;double&gt; containing the distance geometry values laid out consecutively by increasing depth. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" line="103" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a7927099d2380a15d85aa668683266bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename trajectory_type</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; tracktable::_distance_geometry</definition>
        <argsstring>(trajectory_type const &amp;trajectory, unsigned int depth, bool sample_by_distance=true)</argsstring>
        <name>_distance_geometry</name>
        <qualifiedname>tracktable::_distance_geometry</qualifiedname>
        <param>
          <type>trajectory_type const &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample_by_distance</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" line="131" column="1" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" bodystart="131" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a4686aabe07aa7e0e6b66b06aed473f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename trajectory_type</type>
          </param>
          <param>
            <type>typename point_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tracktable::_create_control_points</definition>
        <argsstring>(unsigned int depth, trajectory_type const &amp;trajectory, bool sample_by_distance, std::vector&lt; point_type &gt; &amp;output)</argsstring>
        <name>_create_control_points</name>
        <qualifiedname>tracktable::_create_control_points</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>trajectory_type const &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample_by_distance</declname>
        </param>
        <param>
          <type>std::vector&lt; point_type &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" line="215" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/DistanceGeometry.h" bodystart="215" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab3700f33f36b23ffad13cf2d707b3ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_ANALYSIS_EXPORT void tracktable::great_circle_fit_and_project_in_place</definition>
        <argsstring>(tracktable::domain::terrestrial::trajectory_type &amp;_trajectory, std::string _altitude_string=&quot;altitude&quot;, tracktable::domain::terrestrial::AltitudeUnits _unit=tracktable::domain::terrestrial::AltitudeUnits::FEET)</argsstring>
        <name>great_circle_fit_and_project_in_place</name>
        <qualifiedname>tracktable::great_circle_fit_and_project_in_place</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">tracktable::domain::terrestrial::trajectory_type</ref> &amp;</type>
          <declname>_trajectory</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>_altitude_string</declname>
          <defval>&quot;altitude&quot;</defval>
        </param>
        <param>
          <type>tracktable::domain::terrestrial::AltitudeUnits</type>
          <declname>_unit</declname>
          <defval>tracktable::domain::terrestrial::AltitudeUnits::FEET</defval>
        </param>
        <briefdescription>
<para>Find the best fit plane and project onto it The purpose is to do a linear fit on a globe. </para>
        </briefdescription>
        <detaileddescription>
<para>Thus it only works with terrestrial trajectories <simplesect kind="note"><para>in place version is a destructive the process, the trajectory is modified. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>The trajectory to be &apos;linearized&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_altitude_string</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of point property that contains altitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Units of the altitude property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" line="64" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" bodystart="64" bodyend="69" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1ab3de14ffc04f1c383bc904fe663ccd95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">tracktable::domain::terrestrial::trajectory_type</ref></type>
        <definition>TRACKTABLE_ANALYSIS_EXPORT tracktable::domain::terrestrial::trajectory_type tracktable::great_circle_fit_and_project</definition>
        <argsstring>(tracktable::domain::terrestrial::trajectory_type const &amp;_trajectory, std::string _altitude_string=&quot;altitude&quot;, tracktable::domain::terrestrial::AltitudeUnits _unit=tracktable::domain::terrestrial::AltitudeUnits::FEET)</argsstring>
        <name>great_circle_fit_and_project</name>
        <qualifiedname>tracktable::great_circle_fit_and_project</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">tracktable::domain::terrestrial::trajectory_type</ref> const &amp;</type>
          <declname>_trajectory</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>_altitude_string</declname>
          <defval>&quot;altitude&quot;</defval>
        </param>
        <param>
          <type>tracktable::domain::terrestrial::AltitudeUnits</type>
          <declname>_unit</declname>
          <defval>tracktable::domain::terrestrial::AltitudeUnits::FEET</defval>
        </param>
        <briefdescription>
<para>Find the best fit plane and project onto it The purpose is to do a linear fit on a globe. </para>
        </briefdescription>
        <detaileddescription>
<para>Thus it only works with terrestrial trajectories <simplesect kind="note"><para>non destructive version. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>The trajectory to be &apos;linearized&apos; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_altitude_string</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of point property that contains altitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Units of the altitude property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" line="71" column="50" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" bodystart="71" bodyend="77" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.h" declline="83" declcolumn="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a16563bb7d16de3ae1e8d44a4e2cef158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtracktable_1_1domain_1_1cartesian3d_1_1_cartesian_point3_d" kindref="compound">tracktable::domain::cartesian3d::base_point_type</ref></type>
        <definition>TRACKTABLE_ANALYSIS_EXPORT tracktable::domain::cartesian3d::base_point_type tracktable::find_best_fit_plane</definition>
        <argsstring>(const tracktable::domain::terrestrial::trajectory_type &amp;_trajectory, std::string _altitude_string=&quot;altitude&quot;, tracktable::domain::terrestrial::AltitudeUnits _unit=tracktable::domain::terrestrial::AltitudeUnits::FEET)</argsstring>
        <name>find_best_fit_plane</name>
        <qualifiedname>tracktable::find_best_fit_plane</qualifiedname>
        <param>
          <type>const <ref refid="classtracktable_1_1_trajectory" kindref="compound">tracktable::domain::terrestrial::trajectory_type</ref> &amp;</type>
          <declname>_trajectory</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>_altitude_string</declname>
          <defval>&quot;altitude&quot;</defval>
        </param>
        <param>
          <type>tracktable::domain::terrestrial::AltitudeUnits</type>
          <declname>_unit</declname>
          <defval>tracktable::domain::terrestrial::AltitudeUnits::FEET</defval>
        </param>
        <briefdescription>
<para>We find the vector representing the normal to the plane where the total squared distance of points in the trajectory to that plane is minimized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>The trajectory to fit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The normal (in ECEF space) representing the best fit plane. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_altitude_string</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of point property that contains altitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Units of the altitude property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" line="80" column="50" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" bodystart="80" bodyend="143" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.h" declline="97" declcolumn="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacetracktable_1a5227e517080e119e0386564a0917ec09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>TRACKTABLE_ANALYSIS_EXPORT void tracktable::project_trajectory_onto_plane</definition>
        <argsstring>(tracktable::domain::terrestrial::trajectory_type &amp;_trajectory, const tracktable::domain::cartesian3d::base_point_type &amp;_normal, std::string _altitude_string=&quot;altitude&quot;, tracktable::domain::terrestrial::AltitudeUnits _unit=tracktable::domain::terrestrial::AltitudeUnits::FEET)</argsstring>
        <name>project_trajectory_onto_plane</name>
        <qualifiedname>tracktable::project_trajectory_onto_plane</qualifiedname>
        <param>
          <type><ref refid="classtracktable_1_1_trajectory" kindref="compound">tracktable::domain::terrestrial::trajectory_type</ref> &amp;</type>
          <declname>_trajectory</declname>
        </param>
        <param>
          <type>const <ref refid="classtracktable_1_1domain_1_1cartesian3d_1_1_cartesian_point3_d" kindref="compound">tracktable::domain::cartesian3d::base_point_type</ref> &amp;</type>
          <declname>_normal</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>_altitude_string</declname>
          <defval>&quot;altitude&quot;</defval>
        </param>
        <param>
          <type>tracktable::domain::terrestrial::AltitudeUnits</type>
          <declname>_unit</declname>
          <defval>tracktable::domain::terrestrial::AltitudeUnits::FEET</defval>
        </param>
        <briefdescription>
<para>Project a trajectory onto a plane defined by it&apos;s normal in ECEF space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>the trajectory to project </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_normal</parametername>
</parameternamelist>
<parameterdescription>
<para>The normal that defines the plane to project on to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_altitude_string</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of point property that contains altitude </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Units of the altitude property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" line="145" column="6" bodyfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.cpp" bodystart="145" bodyend="158" declfile="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Analysis/GreatCircleFit.h" declline="111" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>SimplifyLinestring: Translate a call to <ref refid="namespacetracktable_1aec0c645e22389978c15b10e9ed1c6b7a" kindref="member">tracktable::simplify</ref> into a call to boost::geometry::simplify. </para>
    </briefdescription>
    <detaileddescription>
<para>By default, we forward the user&apos;s arguments (geometry to simplify, tolerance) directly to boost::geometry::simplify for Douglas-Peucker simplification. We can override this (e.g. for unit conversion) by specializing <ref refid="structtracktable_1_1algorithms_1_1simplify__linestring" kindref="compound">tracktable::algorithms::simplify_linestring</ref> for particular point types. </para>
    </detaileddescription>
    <location file="/Users/atwilso/projects/rtd_debug/rtd_debug/src/tracktable/cpp/Core/Box.h" line="41" column="1"/>
  </compounddef>
</doxygen>
